def solve(n, height):
    water=0
    inx=0
#removing part on front that don't store water
    for inx in range(0,n-1):
        if height[inx]<height[inx+1]:
            continue
        break
    start = inx
#removing part on rear that don't store water
    for inx in range(n-1,-1,-1):
        if height[inx] < height[inx-1]:
            continue
        break
    n=inx+1
#if taller or equal wall is available in front
    while start != n-1:
        flag= True
        for i in range (start+1,n):
            if height[start] <= height[i]:
                for w in range (start+1,i):
                    water += (height[start] - height[w])
                start=i
                flag= False
                break
#if wall is tallest in remaining part
        if flag:
#search for second tallest wall
            maxHeight=start+1
            for inx in range(start+2,n):
                if height[maxHeight] < height[inx]:
                    maxHeight = inx
#calculate water between tallest wall and second tallest wall
            for w in range(start+1,maxHeight):
                water += height[maxHeight] - height[w]  
            start = maxHeight  
    return water
